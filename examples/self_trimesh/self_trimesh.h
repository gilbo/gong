/*
  This library was auto-generated by Gong.
*/

#ifndef _C__GONG_H_
#define _C__GONG_H_

#include <cstdint>

extern "C" {
typedef struct {
  uint64_t id;
} C__Store;

typedef struct {
  float d[3];
} tensor_float_3_;
typedef struct {
  uint32_t d[3];
} tensor_row_Verts__3_;

/* New and Destroy Store; Error Handling */
C__Store C__NewStore(  );
void C__DestroyStore( C__Store );
int8_t* C__GetError( C__Store );

/* Exported Joins */
void C__find_et_iscts( C__Store );

/*
Table ETcontacts {
  edge : uint32
  tri : uint32
  pos : tensor_float_3_
}
*/
uint32_t C__GetSize_ETcontacts( C__Store );
void C__BeginLoad_ETcontacts( C__Store, uint32_t );
void C__EndLoad_ETcontacts( C__Store );
void C__LoadRow_ETcontacts( C__Store, uint32_t, uint32_t, tensor_float_3_ );
void C__Load_ETcontacts_edge( C__Store, uint32_t*, uint32_t );
uint32_t C__Read_ETcontacts_edge( C__Store, uint32_t );
void C__Write_ETcontacts_edge( C__Store, uint32_t, uint32_t );
uint32_t* C__ReadWriteLock_ETcontacts_edge( C__Store );
void C__ReadWriteUnLock_ETcontacts_edge( C__Store );
void C__Load_ETcontacts_tri( C__Store, uint32_t*, uint32_t );
uint32_t C__Read_ETcontacts_tri( C__Store, uint32_t );
void C__Write_ETcontacts_tri( C__Store, uint32_t, uint32_t );
uint32_t* C__ReadWriteLock_ETcontacts_tri( C__Store );
void C__ReadWriteUnLock_ETcontacts_tri( C__Store );
void C__Load_ETcontacts_pos( C__Store, tensor_float_3_*, uint32_t );
tensor_float_3_ C__Read_ETcontacts_pos( C__Store, uint32_t );
void C__Write_ETcontacts_pos( C__Store, uint32_t, tensor_float_3_ );
tensor_float_3_* C__ReadWriteLock_ETcontacts_pos( C__Store );
void C__ReadWriteUnLock_ETcontacts_pos( C__Store );

/*
Table Edges {
  hd : uint32
  tl : uint32
}
*/
uint32_t C__GetSize_Edges( C__Store );
void C__BeginLoad_Edges( C__Store, uint32_t );
void C__EndLoad_Edges( C__Store );
void C__LoadRow_Edges( C__Store, uint32_t, uint32_t );
void C__Load_Edges_hd( C__Store, uint32_t*, uint32_t );
uint32_t C__Read_Edges_hd( C__Store, uint32_t );
void C__Write_Edges_hd( C__Store, uint32_t, uint32_t );
uint32_t* C__ReadWriteLock_Edges_hd( C__Store );
void C__ReadWriteUnLock_Edges_hd( C__Store );
void C__Load_Edges_tl( C__Store, uint32_t*, uint32_t );
uint32_t C__Read_Edges_tl( C__Store, uint32_t );
void C__Write_Edges_tl( C__Store, uint32_t, uint32_t );
uint32_t* C__ReadWriteLock_Edges_tl( C__Store );
void C__ReadWriteUnLock_Edges_tl( C__Store );

/*
Table Tris {
  v : tensor_row_Verts__3_
}
*/
uint32_t C__GetSize_Tris( C__Store );
void C__BeginLoad_Tris( C__Store, uint32_t );
void C__EndLoad_Tris( C__Store );
void C__LoadRow_Tris( C__Store, tensor_row_Verts__3_ );
void C__Load_Tris_v( C__Store, tensor_row_Verts__3_*, uint32_t );
tensor_row_Verts__3_ C__Read_Tris_v( C__Store, uint32_t );
void C__Write_Tris_v( C__Store, uint32_t, tensor_row_Verts__3_ );
tensor_row_Verts__3_* C__ReadWriteLock_Tris_v( C__Store );
void C__ReadWriteUnLock_Tris_v( C__Store );

/*
Table Verts {
  pos : tensor_float_3_
}
*/
uint32_t C__GetSize_Verts( C__Store );
void C__BeginLoad_Verts( C__Store, uint32_t );
void C__EndLoad_Verts( C__Store );
void C__LoadRow_Verts( C__Store, tensor_float_3_ );
void C__Load_Verts_pos( C__Store, tensor_float_3_*, uint32_t );
tensor_float_3_ C__Read_Verts_pos( C__Store, uint32_t );
void C__Write_Verts_pos( C__Store, uint32_t, tensor_float_3_ );
tensor_float_3_* C__ReadWriteLock_Verts_pos( C__Store );
void C__ReadWriteUnLock_Verts_pos( C__Store );

}

class Store {
private:
  C__Store store;
public:
  static Store NewStore() { 
    Store s; s.store = C__NewStore(); return s;
  }
  void destroy() { C__DestroyStore(store); }
  char* geterror() { return (char*)(C__GetError(store)); };
  
  void find_et_iscts() { C__find_et_iscts(store); }
  
  class _Tris {
  private:
    C__Store store;
  public:
    _Tris(C__Store store_) : store(store_) {}
    
    uint32_t size() { return C__GetSize_Tris(store); }
    void beginload(uint32_t a0) { C__BeginLoad_Tris(store, a0); }
    void endload() { C__EndLoad_Tris(store); }
    void loadrow(tensor_row_Verts__3_ a0) { C__LoadRow_Tris(store, a0); }
    
    class _v {
    private:
      C__Store store;
    public:
      _v(C__Store store_) : store(store_) {}
      
      void load(tensor_row_Verts__3_* a0, uint32_t a1) { C__Load_Tris_v(store, a0, a1); }
      tensor_row_Verts__3_ read(uint32_t a0) { return C__Read_Tris_v(store, a0); }
      void write(uint32_t a0, tensor_row_Verts__3_ a1) { C__Write_Tris_v(store, a0, a1); }
      tensor_row_Verts__3_* readwrite_lock() { return C__ReadWriteLock_Tris_v(store); }
      void readwrite_unlock() { C__ReadWriteUnLock_Tris_v(store); }
    };
    _v v() { return _v(store); }
    
  };
  _Tris Tris() { return _Tris(store); }
  
  class _Verts {
  private:
    C__Store store;
  public:
    _Verts(C__Store store_) : store(store_) {}
    
    uint32_t size() { return C__GetSize_Verts(store); }
    void beginload(uint32_t a0) { C__BeginLoad_Verts(store, a0); }
    void endload() { C__EndLoad_Verts(store); }
    void loadrow(tensor_float_3_ a0) { C__LoadRow_Verts(store, a0); }
    
    class _pos {
    private:
      C__Store store;
    public:
      _pos(C__Store store_) : store(store_) {}
      
      void load(tensor_float_3_* a0, uint32_t a1) { C__Load_Verts_pos(store, a0, a1); }
      tensor_float_3_ read(uint32_t a0) { return C__Read_Verts_pos(store, a0); }
      void write(uint32_t a0, tensor_float_3_ a1) { C__Write_Verts_pos(store, a0, a1); }
      tensor_float_3_* readwrite_lock() { return C__ReadWriteLock_Verts_pos(store); }
      void readwrite_unlock() { C__ReadWriteUnLock_Verts_pos(store); }
    };
    _pos pos() { return _pos(store); }
    
  };
  _Verts Verts() { return _Verts(store); }
  
  class _ETcontacts {
  private:
    C__Store store;
  public:
    _ETcontacts(C__Store store_) : store(store_) {}
    
    uint32_t size() { return C__GetSize_ETcontacts(store); }
    void beginload(uint32_t a0) { C__BeginLoad_ETcontacts(store, a0); }
    void endload() { C__EndLoad_ETcontacts(store); }
    void loadrow(uint32_t a0, uint32_t a1, tensor_float_3_ a2) { C__LoadRow_ETcontacts(store, a0, a1, a2); }
    
    class _tri {
    private:
      C__Store store;
    public:
      _tri(C__Store store_) : store(store_) {}
      
      void load(uint32_t* a0, uint32_t a1) { C__Load_ETcontacts_tri(store, a0, a1); }
      uint32_t read(uint32_t a0) { return C__Read_ETcontacts_tri(store, a0); }
      void write(uint32_t a0, uint32_t a1) { C__Write_ETcontacts_tri(store, a0, a1); }
      uint32_t* readwrite_lock() { return C__ReadWriteLock_ETcontacts_tri(store); }
      void readwrite_unlock() { C__ReadWriteUnLock_ETcontacts_tri(store); }
    };
    _tri tri() { return _tri(store); }
    
    class _pos {
    private:
      C__Store store;
    public:
      _pos(C__Store store_) : store(store_) {}
      
      void load(tensor_float_3_* a0, uint32_t a1) { C__Load_ETcontacts_pos(store, a0, a1); }
      tensor_float_3_ read(uint32_t a0) { return C__Read_ETcontacts_pos(store, a0); }
      void write(uint32_t a0, tensor_float_3_ a1) { C__Write_ETcontacts_pos(store, a0, a1); }
      tensor_float_3_* readwrite_lock() { return C__ReadWriteLock_ETcontacts_pos(store); }
      void readwrite_unlock() { C__ReadWriteUnLock_ETcontacts_pos(store); }
    };
    _pos pos() { return _pos(store); }
    
    class _edge {
    private:
      C__Store store;
    public:
      _edge(C__Store store_) : store(store_) {}
      
      void load(uint32_t* a0, uint32_t a1) { C__Load_ETcontacts_edge(store, a0, a1); }
      uint32_t read(uint32_t a0) { return C__Read_ETcontacts_edge(store, a0); }
      void write(uint32_t a0, uint32_t a1) { C__Write_ETcontacts_edge(store, a0, a1); }
      uint32_t* readwrite_lock() { return C__ReadWriteLock_ETcontacts_edge(store); }
      void readwrite_unlock() { C__ReadWriteUnLock_ETcontacts_edge(store); }
    };
    _edge edge() { return _edge(store); }
    
  };
  _ETcontacts ETcontacts() { return _ETcontacts(store); }
  
  class _Edges {
  private:
    C__Store store;
  public:
    _Edges(C__Store store_) : store(store_) {}
    
    uint32_t size() { return C__GetSize_Edges(store); }
    void beginload(uint32_t a0) { C__BeginLoad_Edges(store, a0); }
    void endload() { C__EndLoad_Edges(store); }
    void loadrow(uint32_t a0, uint32_t a1) { C__LoadRow_Edges(store, a0, a1); }
    
    class _hd {
    private:
      C__Store store;
    public:
      _hd(C__Store store_) : store(store_) {}
      
      void load(uint32_t* a0, uint32_t a1) { C__Load_Edges_hd(store, a0, a1); }
      uint32_t read(uint32_t a0) { return C__Read_Edges_hd(store, a0); }
      void write(uint32_t a0, uint32_t a1) { C__Write_Edges_hd(store, a0, a1); }
      uint32_t* readwrite_lock() { return C__ReadWriteLock_Edges_hd(store); }
      void readwrite_unlock() { C__ReadWriteUnLock_Edges_hd(store); }
    };
    _hd hd() { return _hd(store); }
    
    class _tl {
    private:
      C__Store store;
    public:
      _tl(C__Store store_) : store(store_) {}
      
      void load(uint32_t* a0, uint32_t a1) { C__Load_Edges_tl(store, a0, a1); }
      uint32_t read(uint32_t a0) { return C__Read_Edges_tl(store, a0); }
      void write(uint32_t a0, uint32_t a1) { C__Write_Edges_tl(store, a0, a1); }
      uint32_t* readwrite_lock() { return C__ReadWriteLock_Edges_tl(store); }
      void readwrite_unlock() { C__ReadWriteUnLock_Edges_tl(store); }
    };
    _tl tl() { return _tl(store); }
    
  };
  _Edges Edges() { return _Edges(store); }
  
};

#endif /* _C__GONG_H_ */
