#!/usr/bin/env terra

local ffi = require 'ffi'
local PN  = require 'include.gong.tools.pathname'

local SCAN_DIR      = 'include/gong/src'
local ANALYSIS_DIR  = 'coverage_src'

if ffi.os == 'Windows' then
  print('TODO windows')
end
local lscmd     = "find "..SCAN_DIR
local mkdircmd  = "mkdir -p "..ANALYSIS_DIR

-- load info
local covinfo   = loadfile("coverageinfo.lua")
if not covinfo then error('Could not find file "coverageinfo.lua"') end
covinfo         = covinfo()
-- normalize filepaths
local covcpy    = {}
covcpy, covinfo = covinfo, covcpy
for k,v in pairs(covcpy) do
  if k:sub(1,2) == '@/' then
    k = '@'..tostring(PN.Pathname.new(k:sub(2)):abspath():cleanpath())
  end
  covinfo[k] = v
end


-- ensure that we have somewhere to put the analyzed files
os.execute(mkdircmd)

local function genReport(filename, lineinfo)
  local srcfilename = filename
  local dstfilename = filename:gsub(SCAN_DIR, ANALYSIS_DIR)

  local srcfile = io.open(srcfilename, 'r')
  local dstfile = io.open(dstfilename, 'w')

  local linenum = 1
  for line in srcfile:lines() do
    local nvisits = lineinfo[linenum]
    linenum = linenum + 1

    -- If we visited this line, then output count
    if nvisits then
      dstfile:write(string.format("%5d:  ",nvisits))
    -- Filter out lines we couldn't possibly visit
    elseif
      string.match(line,"^ *%-%-")    or -- comments
      string.match(line,"^ *$")       or -- blank lines
      -- token only lines
      string.match(line,"^ *end *$")  or
      string.match(line,"^ *} *$")  or
      string.match(line,"^ *then *$") or
      string.match(line,"^ *else *$") or
      string.match(line,"^ *local function") or
      -- tokens with comments
      string.match(line,"^ *end *%-%-$")  or
      string.match(line,"^ *} *%-%-")  or
      string.match(line,"^ *then *%-%-") or
      string.match(line,"^ *else *%-%-")
      -- random other lines
      --string.match(line,"^ *end%) *$")
    then
      dstfile:write("     :  ")
    else
      dstfile:write("#####:  ")
    end

    dstfile:write(line)
    dstfile:write("\n")
  end

  srcfile:close()
  dstfile:close()
end

-- Scan all the source files
for line in io.popen(lscmd):lines() do
  if ffi.os == "Windows" then error('TODO windows') end
  local filename = line:match("^("..SCAN_DIR.."/.*%.t)$")

  -- filter out some files
  if filename and filename:match('coverage%.t') then filename = nil end

  if filename then
    filename = tostring(PN.Pathname.new(filename):abspath():cleanpath())
    local lookupname = '@'..tostring(filename)
    local lineinfo = covinfo[lookupname]
    if lineinfo then
      genReport(filename, lineinfo)
    else
      print('NO COVERAGE INFO FOR '..filename)
    end
  end
end
