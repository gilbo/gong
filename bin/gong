#!/usr/bin/env terra

-- print the number of and specific arguments (for debugging)
--print(#arg, unpack(arg))

-- Note: both of the following argument processing blocks
-- leave the remaining arguments around for the called script to consume
local cmd_arg = arg[0]

-- Extract options
local options = {}
local i = 1
while i<=#arg do
  if arg[i] == '--help' then
    options.help = true
  elseif arg[i] == '--coverage' then
    options.coverage = true
  elseif arg[i] == '--debug_gpu_mem' then
    options.DEBUG_GPU_MEM = true
  elseif arg[i] == '--no_profiling' then
    options.PROFILING_OFF = true
  elseif arg[i] == '--slow_verify' then
    options.SLOW_VERIFY = true
  else break end
  i = i+1
end
arg = {select(i,unpack(arg))}

-- Script filename?
local scriptname = nil
if #arg > 0 then
  scriptname = arg[1]
  arg = {select(2,unpack(arg))}
end

-- restore the command argument
arg[0] = cmd_arg

local function printhelp()
print([[
gong [options] source_file.t
OPTIONS:
  --help            print this help message
  --coverage        run with internal code coverage analysis on
                    (for gong developers, not users)
  --debug_gpu_mem   compile with debug messages on gpu memory operations
  --no_profiling    turn off profiling to ensure no performance effect
  --slow_verify     turn on a lot of slow sanity checks (array bounds)
                    to help catch tricky bugs.
]])
end

if options.help then
  printhelp()
  os.exit(0)
end


-- Extract script filename to run
if not scriptname then
  printhelp()
  print('Error: expected source file to run; got none')
  os.exit(1)
end

-- get the directory of this launcher script file using a Lua trick
local C = terralib.includecstring [[ #include <stdlib.h> ]]
local ffi = require 'ffi'
local script_path = debug.getinfo(1,"S").source:match("@(.*)$")
local incdir_path = ""
if ffi.os == "Windows" then
  -- Complete hack. TODO: find some way around this
  incdir_path = "D:/Projects/gong/include"
else
  script_path = C.realpath(script_path, nil)
  if script_path == nil then
    error('error locating this script')
  else
    local c_str = script_path
    script_path = ffi.string(c_str)
    C.free(c_str)
  end
  -- has the form 'path_to_bin_dir/gong', so...
  local bindir_path    = script_path:sub(1,-#'gong' - 1)
  incdir_path    = bindir_path..'../include'
  -- For debug
  --print(script_path, bindir_path, incdir_path)
end

-- Now that we have the path, we can use it to extend the Terra
-- searchpath to find the Gong files
package.terrapath = package.terrapath..';'..incdir_path..'/?.t'

if options.coverage then
  require 'gong.src.coverage'
  options.coverage = nil
end

-- load options if present
if next(options) then
  local PARAMS = require 'gong.src.params'
  for nm,val in pairs(options) do
    val = tonumber(val) or val
    PARAMS.set_param(nm, val)
  end
end

-- and we can launch the script safely now
local gong_script, load_err = terralib.loadfile(scriptname)
if load_err then
  print(load_err)
  os.exit(1)
else
  gong_script() -- actually execute the script
end
